/**
 * The data of food.
 *
 * @type {[string[], [string, number][] | () => [string, number][]][]}
 */
const food_data = [
    [
        ["冰淇淋", "雪糕"],
        [["不会是刺客吧（逃", 500], ["不过还是投喂成功！好感度+2", 4000]],
    ],
    [
        ["天赋党", "家长党", "双性党", "中奖党", "年龄党", "小朋友", "欣然", "某只小朋友", "柴柴"],
        function () {
            const eat = [
                "煲汤吃掉",
                "一口吞掉",
                "煮了吃掉",
                "抓来做汤",
                "她这么可爱为什么吃她pwq……个鬼啦当然要好好的吃掉",
                "煲汤煲汤",
            ];
            const eat_text = eat[Math.floor(Math.random() * eat.length)];
            return [[`aww${eat_text}！好感度+2`, 500]];
        }
    ],
    [
        [
            "雌二醇", "戊酸雌二醇", "补佳乐", "色普龙", "螺内酯", "醋酸环丙孕酮", "日雌",
            "爱斯妥", "雌二醇凝胶", "凝胶", "十一酸睾酮", "雌二醇贴片", "糖", "孕激素", "雄激素",
            "妈富隆", "悦可婷", "非那雄胺", "比卡鲁胺", "度他雄胺",
        ],
        [["机械琳酱不吃糖糖pwq", 500]],
    ],
    [
        ["hina", "ひな", "云吞"],
        [["ひな好吃（逃（好感度+2", 500]],
    ],
    [
        ["企鹅"],
        [["和小朋友一起炖了！（好感度+2", 500]],
    ],
    [
        ["琳酱"],
        [["我才不吃自己呢！", 500]],
    ],
    [
        ["linca", "锦心"],
        [["锦心那么可爱，不吃锦心w", 500]],
    ],
    [
        ["seni", "senioria", "刺猬", "小刺猬"],
        [["seni那么可爱，不吃seniw", 500]],
    ],
    [
        [
            "西瓜", "水果", "冰棍", "口香糖", "卫龙", "香蕉", "牛奶", "旺旺", "碎冰冰", "火龙果", "苹果", "梨",
            "梨子", "山楂", "枇杷", "樱桃", "梅子", "李子", "草莓", "蓝莓", "西梅", "黑莓", "米饭", "蔬菜", "饭",
            "酸橙", "柚子", "柠檬", "橙子", "青柠", "哈密瓜", "香瓜", "甜瓜", "红枣", "提子", "葡萄", "蔓越莓",
            "腰果", "芒果", "猕猴桃", "菠萝", "小布丁", "老绿豆", "杨梅", "柿子", "木瓜", "桑葚", "无花果",
            "波罗蜜", "火龙果", "荔枝", "桂圆", "榴莲", "石榴", "椰子", "山竹", "百香果", "牛油果", "茄子",
            "白菜", "包菜", "神秘果", "大豆", "豆浆", "啤酒", "白酒", "酒", "苹果醋", "甘蔗", "番茄", "西红柿",
            "奶茶", "猪肉", "牛肉", "狗肉", "凉面", "白开水", "烤肉", "烤鱼", "蜗牛", "田螺", "土豆丝", "老婆饼",
            "寿司", "红茶", "猫猫",
        ],
        [["投喂成功！好感度+2", 500]],
    ],
    [
        ["昏睡红茶", "野兽先辈", "田所浩二"],
        [["啊啊啊啊啊啊啊啊啊啊啊（吼叫", 500]],
    ],
];

// Preprocess food data
/** @type {Map<string, () => [string, number][]>} */
let food_map = new Map();
for (let [names, fn] of food_data) {
    if (fn instanceof Array) {
        let ctnt = fn;
        fn = () => ctnt;
    }
    for (let n of names) {
        food_map.set(n, fn);
    }
}

/**
 * Generate the feeding message.
 *
 * @param {string} name The name of the food
 *
 * @returns {[string, number][]} A list of feeding message.
 */
export function generate_feed_food(name) {
    if (!food_map.has(name)) {
        return [["琳酱不认识，不要给我吃奇怪的东西pwq", 500]];
    }
    else {
        return food_map.get(name)();
    }
}

